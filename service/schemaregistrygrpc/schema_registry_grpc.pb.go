// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/schema_registry.proto

package schemaregistry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchemaRegistry_ValidateEvent_FullMethodName = "/schemaregistrygrp.SchemaRegistry/ValidateEvent"
)

// SchemaRegistryClient is the client API for SchemaRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaRegistryClient interface {
	ValidateEvent(ctx context.Context, in *ValidateEventRequest, opts ...grpc.CallOption) (*ValidateEventResponse, error)
}

type schemaRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaRegistryClient(cc grpc.ClientConnInterface) SchemaRegistryClient {
	return &schemaRegistryClient{cc}
}

func (c *schemaRegistryClient) ValidateEvent(ctx context.Context, in *ValidateEventRequest, opts ...grpc.CallOption) (*ValidateEventResponse, error) {
	out := new(ValidateEventResponse)
	err := c.cc.Invoke(ctx, SchemaRegistry_ValidateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaRegistryServer is the server API for SchemaRegistry service.
// All implementations must embed UnimplementedSchemaRegistryServer
// for forward compatibility
type SchemaRegistryServer interface {
	ValidateEvent(context.Context, *ValidateEventRequest) (*ValidateEventResponse, error)
	mustEmbedUnimplementedSchemaRegistryServer()
}

// UnimplementedSchemaRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaRegistryServer struct {
}

func (UnimplementedSchemaRegistryServer) ValidateEvent(context.Context, *ValidateEventRequest) (*ValidateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEvent not implemented")
}
func (UnimplementedSchemaRegistryServer) mustEmbedUnimplementedSchemaRegistryServer() {}

// UnsafeSchemaRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaRegistryServer will
// result in compilation errors.
type UnsafeSchemaRegistryServer interface {
	mustEmbedUnimplementedSchemaRegistryServer()
}

func RegisterSchemaRegistryServer(s grpc.ServiceRegistrar, srv SchemaRegistryServer) {
	s.RegisterService(&SchemaRegistry_ServiceDesc, srv)
}

func _SchemaRegistry_ValidateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaRegistryServer).ValidateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaRegistry_ValidateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaRegistryServer).ValidateEvent(ctx, req.(*ValidateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaRegistry_ServiceDesc is the grpc.ServiceDesc for SchemaRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schemaregistrygrp.SchemaRegistry",
	HandlerType: (*SchemaRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateEvent",
			Handler:    _SchemaRegistry_ValidateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/schema_registry.proto",
}
